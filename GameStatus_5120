# -*- coding: utf-8 -*-


class GameStatus:


	def __init__(self, board_state, turn_O):

		self.board_state = board_state
		self.turn_O = turn_O
		self.oldScores = 0

		self.winner = ""


	def is_terminal(self):
		#check if any cell is empty
		"""

        YOUR CODE below TO CHECK IF ANY CELL IS EMPTY WITH THE VALUE 0. IF THERE IS NO EMPTY
        THEN YOU SHOULD ALSO RETURN THE WINNER OF THE GAME BY CHECKING THE SCORES FOR EACH PLAYER
        """ #should be done below
		for row in self.board_state:
				if all(cell == 1 for cell in row) or all(cell == -1 for cell in row):
					self.winner = "Player O" if self.turn_O else "Player X"
					return True

		for col in range(len(self.board_state[0])):
				if all(row[col] == 1 for row in self.board_state) or all(row[col] == -1 for row in self.board_state):
					self.winner = "Player O" if self.turn_O else "Player X"
					return True

		if all(self.board_state[i][i] == 1 for i in range(len(self.board_state))) or \
			all(self.board_state[i][len(self.board_state) - 1 - i] == 1 for i in range(len(self.board_state))):
				self.winner = "Player O" if self.turn_O else "Player X"
				return True

		if all(self.board_state[i][i] == -1 for i in range(len(self.board_state))) or \
       all(self.board_state[i][len(self.board_state) - 1 - i] == -1 for i in range(len(self.board_state))):
				self.winner = "Player O" if self.turn_O else "Player X"
				return True

		if any(0 in row for row in self.board_state):
				return False  # Game not over, there are empty cells
		else:
				self.winner = "Draw"
				return True  # Game over, it's a draw




	def get_scores(self, terminal):
		"""
        YOUR CODE HERE TO CALCULATE THE SCORES. MAKE SURE YOU ADD THE SCORE FOR EACH PLAYER BY CHECKING
        EACH TRIPLET IN THE BOARD IN EACH DIRECTION (HORIZONAL, VERTICAL, AND ANY DIAGONAL DIRECTION)

        YOU SHOULD THEN RETURN THE CALCULATED SCORE WHICH CAN BE POSITIVE (HUMAN PLAYER WINS),
        NEGATIVE (AI PLAYER WINS), OR 0 (DRAW)

        """#should be donwn below
		score = 0
		for row in self.board_state:
				score += sum(row)
		for col in range(len(self.board_state[0])):
			score += sum(row[col] for row in self.board_state)
    # Diagonal from top left to bottom right
			score += sum(self.board_state[i][i] for i in range(len(self.board_state)))
    # Diagonal from top right to bottom left
			score += sum(self.board_state[i][len(self.board_state) - 1 - i] for i in range(len(self.board_state)))

		if terminal and self.winner == "Player O":
			return score  # Positive score if Player O wins
		elif terminal and self.winner == "Player X":
			return -score  # Negative score if Player X wins
		else:
			return 0  # Draw, score is 0

		#rows = len(self.board_state)
		#cols = len(self.board_state[0])
		#scores = 0
		#check_point = 3 if terminal else 2



	def get_negamax_scores(self, terminal):
		"""
        YOUR CODE HERE TO CALCULATE NEGAMAX SCORES. THIS FUNCTION SHOULD EXACTLY BE THE SAME OF GET_SCORES UNLESS
        YOU SET THE SCORE FOR NEGAMX TO A VALUE THAT IS NOT AN INCREMENT OF 1 (E.G., YOU CAN DO SCORES = SCORES + 100
                                                                               FOR HUMAN PLAYER INSTEAD OF
                                                                               SCORES = SCORES + 1)
        """
		#rows = len(self.board_state)
		#cols = len(self.board_state[0])
		#scores = 0
		#check_point = 3 if terminal else 2


	def get_moves(self):
		moves = []
		"""
        YOUR CODE HERE TO ADD ALL THE NON EMPTY CELLS TO MOVES VARIABLES AND RETURN IT TO BE USE BY YOUR
        MINIMAX OR NEGAMAX FUNCTIONS
        """#should be done below
		for i in range(len(self.board_state)):
			for j in range(len(self.board_state[i])):
				if self.board_state[i][j] == 0:
					moves.append((i, j))
		return moves


	def get_new_state(self, move):
		new_board_state = self.board_state.copy()
		x, y = move[0], move[1]
		new_board_state[x,y] = 1 if self.turn_O else -1
		return GameStatus(new_board_state, not self.turn_O)
